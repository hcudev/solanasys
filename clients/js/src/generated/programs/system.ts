/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU32Encoder } from '@solana/codecs-numbers';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  SystemProgramError,
  SystemProgramErrorCode,
  getSystemProgramErrorFromCode,
} from '../errors';
import {
  ParsedAdvanceNonceAccountInstruction,
  ParsedAllocateInstruction,
  ParsedAllocateWithSeedInstruction,
  ParsedAssignInstruction,
  ParsedAssignWithSeedInstruction,
  ParsedAuthorizeNonceAccountInstruction,
  ParsedCreateAccountInstruction,
  ParsedCreateAccountWithSeedInstruction,
  ParsedInitializeNonceAccountInstruction,
  ParsedTransferSolInstruction,
  ParsedTransferSolWithSeedInstruction,
  ParsedUpgradeNonceAccountInstruction,
  ParsedWithdrawNonceAccountInstruction,
} from '../instructions';
import { memcmp } from '../shared';

export const SYSTEM_PROGRAM_ADDRESS =
  '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;

export type SystemProgram = Program<'11111111111111111111111111111111'> &
  ProgramWithErrors<SystemProgramErrorCode, SystemProgramError>;

export function getSystemProgram(): SystemProgram {
  return {
    name: 'system',
    address: SYSTEM_PROGRAM_ADDRESS,
    getErrorFromCode(code: SystemProgramErrorCode, cause?: Error) {
      return getSystemProgramErrorFromCode(code, cause);
    },
  };
}

export enum SystemAccount {
  Nonce,
}

export enum SystemInstruction {
  CreateAccount,
  Assign,
  TransferSol,
  CreateAccountWithSeed,
  AdvanceNonceAccount,
  WithdrawNonceAccount,
  InitializeNonceAccount,
  AuthorizeNonceAccount,
  Allocate,
  AllocateWithSeed,
  AssignWithSeed,
  TransferSolWithSeed,
  UpgradeNonceAccount,
}

export function identifySystemInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): SystemInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU32Encoder().encode(0), 0)) {
    return SystemInstruction.CreateAccount;
  }
  if (memcmp(data, getU32Encoder().encode(1), 0)) {
    return SystemInstruction.Assign;
  }
  if (memcmp(data, getU32Encoder().encode(2), 0)) {
    return SystemInstruction.TransferSol;
  }
  if (memcmp(data, getU32Encoder().encode(3), 0)) {
    return SystemInstruction.CreateAccountWithSeed;
  }
  if (memcmp(data, getU32Encoder().encode(4), 0)) {
    return SystemInstruction.AdvanceNonceAccount;
  }
  if (memcmp(data, getU32Encoder().encode(5), 0)) {
    return SystemInstruction.WithdrawNonceAccount;
  }
  if (memcmp(data, getU32Encoder().encode(6), 0)) {
    return SystemInstruction.InitializeNonceAccount;
  }
  if (memcmp(data, getU32Encoder().encode(7), 0)) {
    return SystemInstruction.AuthorizeNonceAccount;
  }
  if (memcmp(data, getU32Encoder().encode(8), 0)) {
    return SystemInstruction.Allocate;
  }
  if (memcmp(data, getU32Encoder().encode(9), 0)) {
    return SystemInstruction.AllocateWithSeed;
  }
  if (memcmp(data, getU32Encoder().encode(10), 0)) {
    return SystemInstruction.AssignWithSeed;
  }
  if (memcmp(data, getU32Encoder().encode(11), 0)) {
    return SystemInstruction.TransferSolWithSeed;
  }
  if (memcmp(data, getU32Encoder().encode(12), 0)) {
    return SystemInstruction.UpgradeNonceAccount;
  }
  throw new Error(
    'The provided instruction could not be identified as a system instruction.'
  );
}

export type ParsedSystemInstruction<
  TProgram extends string = '11111111111111111111111111111111'
> =
  | ({
      instructionType: SystemInstruction.CreateAccount;
    } & ParsedCreateAccountInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.Assign;
    } & ParsedAssignInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.TransferSol;
    } & ParsedTransferSolInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.CreateAccountWithSeed;
    } & ParsedCreateAccountWithSeedInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.AdvanceNonceAccount;
    } & ParsedAdvanceNonceAccountInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.WithdrawNonceAccount;
    } & ParsedWithdrawNonceAccountInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.InitializeNonceAccount;
    } & ParsedInitializeNonceAccountInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.AuthorizeNonceAccount;
    } & ParsedAuthorizeNonceAccountInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.Allocate;
    } & ParsedAllocateInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.AllocateWithSeed;
    } & ParsedAllocateWithSeedInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.AssignWithSeed;
    } & ParsedAssignWithSeedInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.TransferSolWithSeed;
    } & ParsedTransferSolWithSeedInstruction<TProgram>)
  | ({
      instructionType: SystemInstruction.UpgradeNonceAccount;
    } & ParsedUpgradeNonceAccountInstruction<TProgram>);
